export type Tile = string; export type PlayerHand = Tile[]; export type Wall = Tile[];
export interface PlayerState { ai: string; hand: PlayerHand; discards: Tile[]; score: number; }
export const generateWall = (): Wall => { const tiles: Tile[] = []; for (const s of ['W','B','T']) for(let i=1;i<=9;i++) for(let k=0;k<4;k++) tiles.push(`${i}${s}`); for(let i=1;i<=7;i++) for(let k=0;k<4;k++) tiles.push(`${i}Z`); return shuffle(tiles); };
export const shuffle = <T,>(arr: T[]): T[] => { const a=[...arr]; for(let i=a.length-1;i>0;i--){ const j=Math.floor(Math.random()*(i+1)); [a[i],a[j]]=[a[j],a[i]];} return a; };
export const dealHands = (wall: Wall, players: string[], n = 13): PlayerState[] => players.map(ai => ({ ai, hand: wall.splice(0, n), discards: [], score: 1000 }));
export const drawTile = (wall: Wall): Tile | null => wall.length ? wall.shift()! : null;
function canFormMelds(c:Record<string,number>):boolean{ const tiles=Object.keys(c).filter(t=>c[t]>0).sort(); for(const tile of tiles){ while(c[tile]>0){ if(c[tile]>=3){ c[tile]-=3; continue;} const n=parseInt(tile[0]); const s=tile[1]; if(s==='Z') return false; const t2=`${n+1}${s}`, t3=`${n+2}${s}`; if((c[t2]||0)>0 && (c[t3]||0)>0){ c[tile]--; c[t2]--; c[t3]--; } else return false; } } return true; }
function isSevenPairs(c:Record<string,number>){ return Object.values(c).filter(v=>v===2).length===7; }
function isThirteenOrphans(hand:Tile[]){ const req=['1W','9W','1B','9B','1T','9T','1Z','2Z','3Z','4Z','5Z','6Z','7Z']; const set=new Set(hand); return req.every(t=>set.has(t)) && hand.some(t=> hand.filter(x=>x===t).length===2); }
export function checkWin(hand: Tile[]): { win: boolean; fan: string[]; score: number }{ if (hand.length !== 14) return { win:false, fan:[], score:0 }; const c:Record<string,number>={}; for(const t of hand) c[t]=(c[t]||0)+1; if(isThirteenOrphans(hand)) return { win:true, fan:['国士无双'], score:88 }; if(isSevenPairs(c)) return { win:true, fan:['七对'], score:24 }; const tiles=Object.keys(c).sort(); for(const pair of tiles){ if(c[pair]<2) continue; const cc={...c}; cc[pair]-=2; if(canFormMelds(cc)) return { win:true, fan:['平胡'], score:8 }; } return { win:false, fan:[], score:0 }; }
